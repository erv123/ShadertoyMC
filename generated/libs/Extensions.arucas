/*
 * Natively implemented on the JVM * These functions are treated as if
 * they were defined in the global scope.
 * These do not need to be imported.
 */

/* BuiltInExtension */
/*
 * This is used to enable or disable debug mode.
 * Parameter - Boolean (bool): True to enable debug mode, false to disable debug mode.
 */
fun debug(bool: Boolean): Null;

/*
 * This is used to evaluate a string as code.
 * This will not inherit imports that are in the parent script.
 * Parameter - String (code): The code to evaluate.
 * Returns - Object: The result of the evaluation.
 */
fun eval(code: String): Object;

/*
 * This is used to enable or disable experimental mode.
 * Parameter - Boolean (bool): True to enable experimental mode, false to disable experimental mode.
 */
fun experimental(bool: Boolean): Null;

/*
 * This is used to get the version of Arucas that is currently running.
 * Returns - String: The version of Arucas that is currently running.
 */
fun getArucasVersion(): String;

/*
 * This is used to get the current date formatted with dd/MM/yyyy in your local time.
 * Returns - String: The current date formatted with dd/MM/yyyy.
 */
fun getDate(): String;

/*
 * This is used to get the current time in milliseconds.
 * Returns - Number: The current time in milliseconds.
 */
fun getMilliTime(): Number;

/*
 * This is used to get the current time in nanoseconds.
 * Returns - Number: The current time in nanoseconds.
 */
fun getNanoTime(): Number;

/*
 * This is used to get the current time formatted with HH:mm:ss in your local time.
 * Returns - String: The current time formatted with HH:mm:ss.
 */
fun getTime(): String;

/*
 * This is used to get the current time in seconds since the Unix epoch.
 * Returns - Number: The current time in seconds since the Unix epoch.
 */
fun getUnixTime(): Number;

/*
 * This is used to take an input from the user. The execution of
 * the script is paused until the user has inputted a value.
 * Parameter - String (prompt): The prompt to show the user.
 * Returns - String: The input from the user.
 */
fun input(prompt: String): String;

/*
 * This is used to determine whether the interpreter is in debug mode.
 */
fun isDebug(): Null;

/*
 * This is used to determine whether the interpreter is in experimental mode.
 */
fun isExperimental(): Null;

/*
 * This is used to check whether the script is the main script.
 * Returns - Boolean: True if the script is the main script, false if it is not.
 */
fun isMain(): Boolean;

/*
 * This is used to get the length of a collection or string.
 * Parameter - String (sizable): The collection or string.
 */
fun len(sizable: String): Null;

/*
 * This prints a value to the output handler.
 * Parameter - Object (value): The value to print.
 */
fun print(value: Object): Null;

/*
 * This prints a number of values to the console.
 * If there are no arguments then this will print a new line,
 * other wise it will print the contents without a new line.
 * Parameter - Object (value): The value to print.
 */
fun print(value...: Object): Null;

/*
 * This logs something to the debug output.
 * It only prints if debug mode is enabled: `debug(true)`.
 * Parameter - Object (value): The value to print.
 */
fun printDebug(value: Object): Null;

/*
 * This is used to generate a random integer between 0 and the bound.
 * Parameter - Number (bound): The maximum bound (exclusive).
 * Returns - Number: The random integer.
 */
fun random(bound: Number): Number;

/*
 * This is used to generate a range of integers starting from 0, incrementing by 1.
 * Parameter - Number (bound): The maximum bound (exclusive).
 * Returns - Iterable: An iterable object that returns the range of integers.
 */
fun range(bound: Number): Iterable;

/*
 * This is used to generate a range of numbers starting
 * from a start value and ending at a bound value incrementing by 1.
 * Parameter - Number (start): The start value.
 * Parameter - Number (bound): The maximum bound (exclusive).
 * Returns - Iterable: An iterable object that returns the range of integers.
 */
fun range(start: Number, bound: Number): Iterable;

/*
 * This is used to generate a range of numbers starting from a
 * start value and ending at a bound value incrementing by a step value.
 * Parameter - Number (start): The start value.
 * Parameter - Number (bound): The maximum bound (exclusive).
 * Parameter - Number (step): The step value.
 * Returns - Iterable: An iterable object that returns the range of integers.
 */
fun range(start: Number, bound: Number, step: Number): Iterable;

/*
 * This is used to run a .arucas file, you can use on script to run other scripts.
 * Parameter - String (path): As a file path.
 * Returns - Object: Any value that the file returns.
 */
fun run(path: String): Object;

/*
 * Deprecated: This should be replaced with 'eval(code)'
 * This is used to evaluate a string as code.
 * This will not inherit imports that are in the parent script.
 * Parameter - String (code): The code to run.
 */
fun runFromString(code: String): Null;

/*
 * This pauses your program for a certain amount of milliseconds.
 * Parameter - Number (milliseconds): The number of milliseconds to sleep.
 */
fun sleep(milliseconds: Number): Null;

/*
 * This is used to stop a script.
 */
fun stop(): Null;

/*
 * This is used to enable or disable suppressing deprecation warnings.
 * Parameter - Boolean (bool): True to enable, false to disable warnings.
 */
fun suppressDeprecated(bool: Boolean): Null;

/* ShaderExtension */
/*
 * Used to iterate over an area specified by the player.
 * This can be done with `/shadertoy area pos1 (<x> <y> <z>)?` and `/shadertoy area pos2 (<x> <y> <z>)?`,
 * or `/shadertoy area origin <x> <y> <z> size <sX> <sY> <sZ>`.
 * Parameter - Function (consumer): This is the lambda function that gets iterated over the specified area. It takes 1-3 Vector3 parameters:
 1. Absolute coordinates of the block in the world.
 2. Normalized coordinates within the area (from -1, -1, -1 to 1, 1, 1).
 3. Local area coordinates (0, 0, 0 at area origin and goes up to sizeX, sizeY, sizeZ).
.
 */
fun area(consumer: Function): Null;

/*
 * Used to iterate over an area specified by an origin and size.
 * Parameter - Number (originX): The origin x coordinate.
 * Parameter - Number (originY): The origin y coordinate.
 * Parameter - Number (originZ): The origin z coordinate.
 * Parameter - Number (sizeX): The size in x axis.
 * Parameter - Number (sizeY): The size in y axis.
 * Parameter - Number (sizeZ): The size in z axis.
 * Parameter - Function (consumer): This is the lambda function that gets iterated over the specified area. It takes 1-3 Vector3 parameters:
 1. Absolute coordinates of the block in the world.
 2. Normalized coordinates within the area (from -1, -1, -1 to 1, 1, 1).
 3. Local area coordinates (0, 0, 0 at area origin and goes up to sizeX, sizeY, sizeZ).
.
 */
fun area(originX: Number, originY: Number, originZ: Number, sizeX: Number, sizeY: Number, sizeZ: Number, consumer: Function): Null;

/*
 * Returns string for your current dimension.
 * For example 'minecraft:the_nether'.
 * Returns - String: String representing your current dimension.
 */
fun dimension(): String;

/*
 * This function allows you to place a block in a given world.
 * The parameters for this function are as follows:

 * position - this can either be as 3 numbers (x, y, z) or as a single Vector3

 * block - this is the same format you would use for a setblock command

 * dimension - this is an optional argument defining the dimension in which to place the block
 * by default this is the dimension of the player that executed the script.
.
 * Parameter - Object (args): The placement arguments, see the function description.
 */
fun place(args...: Object): Null;

/*
 * This queries a the data for a block at a given position in a given dimension.
 * The parameters for this function are as follows:

 * position - this can either be as 3 numbers (x, y, z) or as a single Vector3

 * type - this is optional, this is the type of query, this can be one of the following: 'default', 'block', 'state', 'nbt', see examples

 * dimension - this is an optional argument defining the dimension in which to place the block
 * by default this is the dimension of the player that executed the script.
 * Parameter - Object (args): The query arguments, see function description.
 * Returns - String: The return value depends on the type parameter:
 "default"- returns a string containing all the info
 "block"- returns a string describing the block
 "state"- returns a map containing the state info
 "nbt"- returns a map containing all the nbt data.
 */
fun query(args...: Object): String;

